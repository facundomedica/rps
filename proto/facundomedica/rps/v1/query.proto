syntax = "proto3";
package facundomedica.rps.v1;

option go_package = "github.com/facundomedica/rps";

import "facundomedica/rps/v1/types.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";

// Msg defines the module Msg service.
service Query {
  rpc Games(QueryGamesRequest) returns (QueryGamesResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/facundomedica/rps/v1/games";
  }

  // Count returns the historical number of games played.
  rpc Count(QueryCountRequest) returns (QueryCountResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/facundomedica/rps/v1/count";
  }

  // Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/facundomedica/rps/v1/params";
  }
}

// QueryGamesRequest is the request type for the Query/Games RPC method.
// TODO: add pagination
message QueryGamesRequest {}

// QueryGamesResponse is the response type for the Query/Games RPC method.
message QueryGamesResponse {
  repeated Game games = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryCounterRequest is the request type for the Query/Counter RPC
// method.
message QueryCountRequest {}

// QueryCounterResponse is the response type for the Query/Counter RPC
// method.
message QueryCountResponse {
  // count is the amount of games played so far.
  uint64 count = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
