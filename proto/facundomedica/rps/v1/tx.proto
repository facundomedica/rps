syntax = "proto3";
package facundomedica.rps.v1;

option go_package = "github.com/facundomedica/rps";

import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "facundomedica/rps/v1/types.proto";
import "cosmos_proto/cosmos.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc NewGame(MsgNewGame) returns (MsgNewGameResponse);

  rpc CommitMove(MsgCommitMove) returns (MsgCommitMoveResponse);

  rpc RevealMove(MsgRevealMove) returns (MsgRevealMoveResponse);

  // UpdateParams updates the module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

message MsgNewGame {
  option (cosmos.msg.v1.signer) = "player";
  option (amino.name) = "facundomedica/rps/MsgNewGame";

  string player = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // commit is the hex encoded commitment to the first move.
  // hex encoded sha256 of "salt:move" where move is one of "rock", "paper",
  // "scissors"
  string commit = 2;

  // entry_fee is the amount to put into stake for the game.
  cosmos.base.v1beta1.Coin entry_fee = 3 [(gogoproto.nullable) = false];
}

message MsgNewGameResponse {
  // game_id is the ID of the created game.
  uint64 game_id = 1;
}

message MsgCommitMove {
  option (cosmos.msg.v1.signer) = "player";
  option (amino.name) = "facundomedica/rps/MsgCommitMove";

  string player = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // game_id is the ID of the game to commit the move to.
  uint64 game_id = 2;

  // commit is the hex encoded commitment to the move.
  // SHA256("32byte-salt" + "move") where move is one of "rock", "paper",
  // "scissors"
  string commit = 3;
}

message MsgCommitMoveResponse {}

message MsgRevealMove {
  option (cosmos.msg.v1.signer) = "player";
  option (amino.name) = "facundomedica/rps/MsgRevealMove";


  string player = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // game_id is the ID of the game to reveal the move for.
  uint64 game_id = 2;

  // move is the move to reveal.
  // Must be one of "rock", "paper", "scissors"
  string move = 3;

  // salt is the salt used to create the commitment.
  string salt = 4;
}

message MsgRevealMoveResponse {}


// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "facundomedica/rps/MsgUpdateParams";

  // authority is the address that controls the module
  // NOTE: Defaults to the governance module unless overwritten.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
